use project_tracker_core::Database;
use project_tracker_server::{ConnectedClient, CpuUsageAverage, ModifiedEvent};
use std::{collections::HashSet, path::PathBuf, sync::Arc};
use tokio::sync::{
	broadcast::{Receiver, Sender},
	RwLock,
};
use tracing::info;
use warp::{path, reply::html, serve, Filter};

#[macro_use]
mod utils;

mod get_admin_infos;
use get_admin_infos::get_admin_infos_route;

mod load_database;
use load_database::load_database_route;

mod ws;
use ws::ws_route;

// get generated by 'build.rs'
const SELF_SIGNED_KEY_PEM: &[u8] = include_bytes!("self_signed_certificates/key.pem");
const SELF_SIGNED_CERT_PEM: &[u8] = include_bytes!("self_signed_certificates/cert.pem");

#[allow(clippy::too_many_arguments)]
pub async fn run_web_server(
	password: String,
	modified_sender: Sender<ModifiedEvent>,
	modified_receiver: Receiver<ModifiedEvent>,
	shared_database: Arc<RwLock<Database>>,
	connected_clients: Arc<RwLock<HashSet<ConnectedClient>>>,
	cpu_usage_avg: Arc<CpuUsageAverage>,
	database_filepath: PathBuf,
	log_filepath: PathBuf,
	custom_cert_and_key_pem: Option<(Vec<u8>, Vec<u8>)>,
) {
	let index_html_route = path::end()
		.or(path("index.html"))
		.map(|_| html(include_str!("index.html")));

	let routes = index_html_route
		.or(css_route!("style.css"))
		.or(js_route!("script.js"))
		.or(js_route!("service-worker.js"))
		.or(json_route!("manifest.json"))
		.or(index_html_route!("login"))
		.or(js_route!("login/script.js"))
		.or(css_route!("login/style.css"))
		.or(index_html_route!("admin"))
		.or(js_route!("admin/script.js"))
		.or(css_route!("admin/style.css"))
		.or(ico_route!("static/favicon.ico"))
		.or(png_route!("static/icon_180x180.png"))
		.or(png_route!("static/apple-touch-icon.png"))
		.or(svg_route!("static/caret-down-fill.svg"))
		.or(svg_route!("static/caret-right-fill.svg"))
		.or(svg_route!("static/bar-chart-fill.svg"))
		.or(svg_route!("static/house-fill.svg"))
		.or(svg_route!("static/globe.svg"))
		.or(svg_route!("static/window.svg"))
		.or(svg_route!("static/cpu.svg"))
		.or(svg_route!("static/hourglass-split.svg"))
		.or(svg_route!("static/memory.svg"))
		.or(svg_route!("static/thermometer-half.svg"))
		.or(svg_route!("static/file-earmark-text.svg"))
		.or(load_database_route(
			password.clone(),
			shared_database.clone(),
		))
		.or(get_admin_infos_route(
			password.clone(),
			connected_clients.clone(),
			cpu_usage_avg.clone(),
			log_filepath.clone(),
		))
		.or(ws_route(
			database_filepath.clone(),
			shared_database,
			modified_sender,
			modified_receiver,
			connected_clients,
			password,
		));

	let mut server = serve(routes).tls();

	match custom_cert_and_key_pem {
		Some((cert_pem, key_pem)) => {
			server = server.cert(cert_pem);
			server = server.key(key_pem);
		}
		None => {
			server = server.cert(SELF_SIGNED_CERT_PEM);
			server = server.key(SELF_SIGNED_KEY_PEM);
		}
	}

	let (https_addr, https_warp) = server.bind_ephemeral(([0, 0, 0, 0], 443));

	info!("https server listening on {https_addr}");

	https_warp.await;
}
